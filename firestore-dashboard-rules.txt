rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default: deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User-specific dashboard data
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own profile with validation
      allow update: if request.auth != null && 
                     request.auth.uid == userId &&
                     (!request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['role', 'createdAt'])); // Prevent changing role or creation date
    
      // Dashboard data collection
      match /dashboard_data/{docId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Training plans
      match /training_plans/{planId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Only the user or admin can create/update plans
        allow write: if request.auth != null && 
                      (request.auth.uid == userId || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }
      
      // Sessions
      match /sessions/{sessionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Session data validation
        function validateSessionData() {
          let data = request.resource.data;
          return data.keys().hasAll(['date', 'title', 'type', 'duration']) &&
                 data.date is timestamp &&
                 data.title is string &&
                 data.duration is number &&
                 data.duration > 0;
        }
        
        // Allow create with validation
        allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       validateSessionData();
                       
        // Allow update with validation
        allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       validateSessionData();
      }
      
      // Progress metrics
      match /metrics/{metricId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Metric data validation
        function validateMetricData() {
          let data = request.resource.data;
          return data.keys().hasAll(['date', 'type', 'value']) &&
                 data.date is timestamp &&
                 data.type is string &&
                 data.value is number;
        }
        
        // Allow create with validation
        allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       validateMetricData();
                       
        // Allow update with validation
        allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       validateMetricData();
      }
    }
    
    // Global configuration accessible to all authenticated users
    match /config/{configId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write via backend
    }
    
    // Feature flags
    match /features/{featureId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write via backend
    }
  }
}
